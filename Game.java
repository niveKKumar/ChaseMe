import javax.swing.*;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseEvent;import java.util.concurrent.TimeUnit;public class Game implements ActionListener {    //Data:    public int currentLevel;    //Benutzerführung:    public JTextArea levelAnzeige;    private boolean gridLines;        /**     * Spiel Klasse die vorgefertigte Level beinhaltet = eigentliche Spielumgebung-> Konfigurierbar     */    //Core Objects:    private GamePanel gamePanel;    public int click = 0;    private int currentClick;    private int currentSteps;    private int dialog;    private boolean active;    private long timestamp;    private KeyManager keyListener;    private Level[] level;    //Konfiguration: //Objekte kann man nicht konfigurieren!    public Game(GamePanel gp, KeyManager pKeyListener) {        gamePanel = gp;        keyListener = pKeyListener;        //DEBUGGING:        levelAnzeige = new JTextArea("levelAnzeige");        levelAnzeige.setFocusable(false);        GUI.addToDebugPane(levelAnzeige);        createLevel();        createLobby();    }    public JPanel createLevelMenu() {        JPanel lvlMenu = new JPanel();        lvlMenu.setLayout(new GridBagLayout());        GridBagConstraints gbc = new GridBagConstraints();        gbc.insets = new Insets(5, 5, 5, 5);        gbc.gridy = 0;        for (int i = 0; i < level.length; i++) {            gbc.gridx = 0;            gbc.gridy++;            String lvl;            if (level[i].getLevel() != 0) {                lvl = Integer.toString(level[i].getLevel());            } else {                lvl = "Lobby";            }            MenuButton btlvl = new MenuButton(lvl);            btlvl.addActionListener(this);            lvlMenu.add(btlvl, gbc);        }        return lvlMenu;    }    private void createLevel() {        // FIXME: 31.05.2019 Eigene TextFile ?...        level = new Level[5];        for (int i = 0; i < level.length; i++) {            level[i] = new Level(gamePanel, i, keyListener, gamePanel.getCamera());        }        level[0].createLevelObjects(1, 0, 0);        level[1].createLevelObjects(4, 20, 2);        level[2].createLevelObjects(2, 2, 2);        level[3].createLevelObjects(2, 2, 2);        level[4].createLevelObjects(2, 2, 2);    }    public void createLobby() {        Character mover = level[1].getMover();        //Einlesung der Maps:        level[0].setBaseMap("Content/Maps/menu.txt", "Border");        // Intialisierung der Spieler:        mover.setLocation(100, 100);        //System.out.println("Lobby loaded...");        level[0].setGridLines(true);        active = true;        setCurrentLevel(0);        currentClick = click;    }    ////LEVEL 0 - Testumgebung (Editor) ////////////////////////////save//////////////////    //////////////////////////////////////////////////////////////////////////////////    ////////////////////////////////////////////////////////////////////////////////////    public void createlevel0(MapBase[] pMaps, @Nullable Point moverCords) {//        // TODO: 14.04.2019 TileSet Path in Map File !! Done//        // TODO: 14.04.2019 EnemyAmount auch lesbar ! (Vllt Game Config) -> Editor soll nur Map testen können//        //                                                                  (vllt bei Spielupdate die Fähigkeit Game mit Spieler zu erstellen :) )//        // TODO: 14.04.2019 Abfrage von bestimmten Informationen (Mover Spawn Punkt) -> wird einfach abgefragt = ansonsten zu viel Aufwand Done -> andere Möglichkeit eigene Klasse (aufwendig)//        createLevelObjects(pMaps.length, 0/*,moverCords*/);//        maps = pMaps;//        gamePanel.setCamera(maps[0].getMapSizeX(), maps[0].getMapSizeY(), maps[0].getChapterOffset());//        // Intialisierung der Spieler:////        for (int i = 0; i < maps.length; i++) {//            analytics[i] = new DisplayAnalytics(gamePanel, maps[i], pathFinder);//        }////        setCurrentLevel(0);//    }    public void level0GameMechanic() {        // FIXME: 04.05.2019 Kann nichts weil, nix (erstmal) setzbar ist !    }    //////////////////////////////////////////////////////////////////////////////////    //////////////////////////////////////////////////////////////////////////////////    //////////////////////////////////////////////////////////////////////////////////    //<editor-fold desc="LEVEL 1">    ////LEVEL 1 - Intro  /////////////////////////////////////////////////////////////    //////////////////////////////////////////////////////////////////////////////////    //////////////////////////////////////////////////////////////////////////////////    public void createlevel1() {        //Laden der Maps:        Character mover = level[1].getMover();        Runner[] enemy = level[1].getEnemys();        level[1].setBaseMap("Content/Maps/Level1 Concept.txt", "Border");        // Intialisierung der Spieler:        mover.setLocation((7 * Tile.TILEWIDTH), 7 * Tile.TILEHEIGHT);        mover.setSpeed(15);        enemy[0].setLocation((13) * Tile.TILEWIDTH, (3) * Tile.TILEHEIGHT);        enemy[1].setLocation((15) * Tile.TILEWIDTH, (1) * Tile.TILEHEIGHT);        setCurrentLevel(1);        createMarketSituation();        dialog = 1;    }    public void level1GameMechanic() {        Runner[] enemy = level[1].getEnemys();//        level1Dialog();//        if (dialog > 9 && dialog < 12){        for (int i = 5; i < 7; i++) {            enemy[i].setSpeed(3);            enemy[i].movetotarget(0.5, level[1].getMover());        }//        }        enemy[0].enemystraightrun(null, 0.25, 0, 1);    }    public void createMarketSituation() {        Runner[] enemy = level[1].getEnemys();        level[1].getMaps()[1] = new Map(gamePanel, "Content/Maps/Level1C1 Concept.txt", "Item", new Point(0, 0));        enemy[2].setLocation(10 * Tile.TILEWIDTH, 17 * Tile.TILEHEIGHT);        //Markt Leute:        enemy[3].setLocation(10 * Tile.TILEWIDTH, 15 * Tile.TILEHEIGHT);        enemy[4].setLocation(12 * Tile.TILEWIDTH, 16 * Tile.TILEHEIGHT);        enemy[5].setLocation(11 * Tile.TILEWIDTH, 15 * Tile.TILEHEIGHT);        enemy[6].setLocation(14 * Tile.TILEWIDTH, 15 * Tile.TILEHEIGHT);        enemy[7].setLocation(15 * Tile.TILEWIDTH, 13 * Tile.TILEHEIGHT);        enemy[8].setLocation(10 * Tile.TILEWIDTH, 19 * Tile.TILEHEIGHT);        enemy[8].setDirection(2);        enemy[9].setLocation(11 * Tile.TILEWIDTH, 22 * Tile.TILEHEIGHT);        enemy[9].setDirection(2);        enemy[10].setLocation(110 * Tile.TILEWIDTH, 15 * Tile.TILEHEIGHT);        enemy[10].setDirection(2);        enemy[10].setLocation(12 * Tile.TILEWIDTH, 22 * Tile.TILEHEIGHT);        enemy[11].setDirection(3);        enemy[11].setLocation(15 * Tile.TILEWIDTH, 22 * Tile.TILEHEIGHT);        enemy[11].setDirection(3);        enemy[12].setLocation(17 * Tile.TILEWIDTH, 21 * Tile.TILEHEIGHT);        enemy[12].setDirection(3);    }    public void createLevel1C2() {        level[1].getMaps()[2] = new Map(gamePanel, "Content/Maps/Level1C2 Concept.txt", "Item", new Point(25, 0));    }    public void createLevel1C3() {        level[1].getMaps()[3] = new Map(gamePanel, "Content/Maps/Level1C3 Concept.txt", "Item", new Point(25, 25));    }    public void level1Dialog() {        Character mover = level[1].mover;        int speakingspeed = 500;        if (dialog == 1) {            mover.saySomething("Was ist denn da los?" + "\n" + "(Klicken für weiteren Dialog)", true, speakingspeed);            mover.setSpeaking(true);            currentClick = click;            dialog = 2;        }//       //System.out.println("Click in Dialog 1 "+ click +"-"+ currentClick+"="+ (click - currentClick));        if (dialog == 2 && click - currentClick >= 1) {            mover.saySomething("W-A-S-D drücken um sich zu bewegen", true, speakingspeed);            mover.setSpeaking(false);            currentSteps = mover.getSteps();            dialog = 3;        }        if (dialog == 3 && mover.getSteps() - currentSteps >= 50) {            mover.saySomething("Super du kannst laufen !", true, speakingspeed);            timestamp = System.currentTimeMillis();            dialog = 4;        }        if (dialog == 4 && TimeUnit.MILLISECONDS.toSeconds(System.currentTimeMillis() - timestamp) > 2) {            mover.saySomething("Gehe zum Markt (markiertes Feld)", true, speakingspeed);            level[1].maps[0].mapTiles[16][15].setBorderInsets(new Insets(5, 5, 5, 5));            dialog = 5;        }        if (dialog == 5) {            level[1].enemy[0].enemystraightrun(new Point((int) level[1].enemy[0].getLocation().getX() / Tile.TILEWIDTH, 10), 0.5, 0, 1);        }        if (dialog == 5 && mover.isOnThisTile(16, 15, 4)) {            mover.saySomething("! Ich glaube da ist ein Unfall...", true, speakingspeed);            level[1].maps[0].mapTiles[16][15].setBorderInsets(new Insets(0, 0, 0, 0));            level[1].maps[0].mapTiles[13][16].setBorderInsets(new Insets(5, 5, 5, 5));            timestamp = System.currentTimeMillis();            dialog = 6;        }        if (dialog == 6 && mover.isOnThisTile(13, 16, 4)) {            mover.saySomething("Ich muss helfen !!! Nichts wie hin", false, speakingspeed);            System.out.println("Automatisch zum verletzten laufen");            level[1].maps[0].mapTiles[11][19].setBorderInsets(new Insets(5, 5, 5, 5));            timestamp = System.currentTimeMillis();            dialog = 7;        }        if (dialog == 7 && TimeUnit.MILLISECONDS.toSeconds(System.currentTimeMillis() - timestamp) > 8) {            createlevel1();            mover.saySomething("Du warst zu langsam um zu helfen!", true, speakingspeed);            timestamp = System.currentTimeMillis();            if (TimeUnit.MILLISECONDS.toSeconds(System.currentTimeMillis() - timestamp) > 4) {                dialog = 1;            }        }        if (dialog == 7 && mover.isOnThisTile(11, 19, 4)) {            mover.saySomething("Hallo ?! Ist alles okay, du siehts verletzt aus!", true, speakingspeed);            dialog = 8;        }        if (dialog == 8) {            level[1].enemy[2].saySomething("DU hast den Präsidenten verletzt !!! Haltet ihn auf !!", true, speakingspeed);            mover.saySomething("Ich wollte nur helfen.", true, speakingspeed);            timestamp = System.currentTimeMillis();            dialog = 9;        }        if (dialog == 9 && TimeUnit.MILLISECONDS.toSeconds(System.currentTimeMillis() - timestamp) > 4) {            level[1].getEnemys()[3].saySomething("Holt ihn euch!!", true, speakingspeed);            dialog = 10;        }        if (dialog == 10) {            mover.saySomething("Ich muss schnell weg ! Ich bin UNSCHULDIG aber ich brauche Beweise", true, speakingspeed);            dialog = 11;        }        if (dialog == 11 && mover.isInThisArea(new Point(25, 19), new Point(26, 18), 4)) {            mover.speechBubble.setVisible(false);            mover.saySomething("Du hast es geschafft vom Fluchtort zu fliehen! Die K Fähigkeiten hast du schonmal um deine Unschuld zu beweisen! Intro ist vorzeitig beendet.\n Viel Spaß!", true, 50);            dialog = 12;        }    }    //////////////////////////////////////////////////////////////////////////////////    //////////////////////////////////////////////////////////////////////////////////    //////////////////////////////////////////////////////////////////////////////////    //</editor-fold>    //<editor-fold desc="LEVEL 2">    ////LEVEL 2 - First Chapter - "The bright world"  ////////////////////////////////    //////////////////////////////////////////////////////////////////////////////////    //////////////////////////////////////////////////////////////////////////////////    public void createlevel2() {        /** Laden der Maps:         *         */        Character mover = level[2].getMover();        Runner[] enemy = level[2].getEnemys();        level[2].setBaseMap("Content/Maps/XXXX", "All");        //Immer auf BaseMap !! daher nicht im Map Konstruktor:        /** Intialisierung der Spieler:         *         */        mover.setLocation((5 * Tile.TILEWIDTH), 5 * Tile.TILEHEIGHT);        mover.setSpeed(5);        enemy[1].setLocation((16) * 64, (5) * 64);        enemy[2].setLocation((13) * 64, (6) * 64);//        level[2].initializeAnalytics();        setCurrentLevel(2);    }    public void level2GameMechanic() {        /**         * Spielmechanik         */    }    public void level2Dialog() {        /**         * Dialog         */    }    //////////////////////////////////////////////////////////////////////////////////    //////////////////////////////////////////////////////////////////////////////////    //////////////////////////////////////////////////////////////////////////////////    //</editor-fold>    //<editor-fold desc="LEVEL 3">    ////LEVEL 3 - "XXXXXXX"  /////////////////////////////////////////////////////////    //////////////////////////////////////////////////////////////////////////////////    //////////////////////////////////////////////////////////////////////////////////    public void createlevel3() {        /** Laden der Maps:         *         */        Character mover = level[3].getMover();        Runner[] enemy = level[3].getEnemys();        level[3].setBaseMap("Content/Maps/XXXX", "All");        //Immer auf BaseMap !! daher nicht im Map Konstruktor://        level[3].initializeAnalytics();        /** Intialisierung der Spieler:         *         */        mover.setLocation((5 * Tile.TILEWIDTH), 5 * Tile.TILEHEIGHT);        mover.setSpeed(5);        enemy[1].setLocation((16) * 64, (5) * 64);        enemy[2].setLocation((13) * 64, (6) * 64);//        level[2].initializeAnalytics();        setCurrentLevel(3);    }    public void level3GameMechanic() {        /**         * Spielmechanik         */    }    public void level3Dialog() {        /**         * Dialog         */    }    //////////////////////////////////////////////////////////////////////////////////    //////////////////////////////////////////////////////////////////////////////////    //////////////////////////////////////////////////////////////////////////////////    //</editor-fold>    //<editor-fold desc="LEVEL 4">    ////LEVEL 4 - "XXXXXXX"  /////////////////////////////////////////////////////////    //////////////////////////////////////////////////////////////////////////////////    //////////////////////////////////////////////////////////////////////////////////    public void createlevel4() {        /** Laden der Maps:         *         */        Character mover = level[4].getMover();        Runner[] enemy = level[4].getEnemys();        level[4].setBaseMap("Content/Maps/XXXX", "All");        /** Intialisierung der Spieler:         *         */        mover.setLocation((5 * Tile.TILEWIDTH), 5 * Tile.TILEHEIGHT);        mover.setSpeed(5);        enemy[1].setLocation((16) * 64, (5) * 64);        enemy[2].setLocation((13) * 64, (6) * 64);//        level[4].initializeAnalytics();        setCurrentLevel(4);    }    public void level4GameMechanic() {        /**         * Spielmechanik         */    }    public void level4Dialog() {        /**         * Dialog         */    }    //////////////////////////////////////////////////////////////////////////////////    //////////////////////////////////////////////////////////////////////////////////    //////////////////////////////////////////////////////////////////////////////////    //</editor-fold>    //<editor-fold desc="LEVEL 5">    ////LEVEL 5 - "XXXXXXX"  /////////////////////////////////////////////////////////    //////////////////////////////////////////////////////////////////////////////////    //////////////////////////////////////////////////////////////////////////////////    public void createlevel5() {        /** Laden der Maps:         *         */        Character mover = level[5].getMover();        Runner[] enemy = level[5].getEnemys();        level[4].setBaseMap("Content/Maps/XXXX", "All");        /** Intialisierung der Spieler:         *         */        mover.setLocation((5 * Tile.TILEWIDTH), 5 * Tile.TILEHEIGHT);        mover.setSpeed(5);        enemy[1].setLocation((16) * 64, (5) * 64);        enemy[2].setLocation((13) * 64, (6) * 64);//        level[5].initializeAnalytics();        setCurrentLevel(5);    }    public void level5GameMechanic() {        /**         * Spielmechanik         */    }    public void level5Dialog() {        /**         * Dialog         */    }    //////////////////////////////////////////////////////////////////////////////////    //////////////////////////////////////////////////////////////////////////////////    //////////////////////////////////////////////////////////////////////////////////    //</editor-fold>    public void respawn(int level) {        switch (level) {            case 1:                createlevel1();                break;            case 2:                createlevel2();                break;            case 3:                createlevel3();                break;            case 4:                createlevel4();                break;            case 5:                createlevel5();                break;        }    }    public void renderLevel(Graphics2D g2d) {        level[currentLevel].renderLevel(g2d);    }    public void updateLevel() {        level[currentLevel].update();        switch (currentLevel) {                case 0:                    level0GameMechanic();                    break;                case 1:                    level1GameMechanic();                    break;                case 2://                    level2GameMechanic();                    break;                case 3://                    level3GameMechanic();                    break;                case 4://                    level4GameMechanic();                    break;                case 5://                    level5GameMechanic();                    break;        }        Level current = level[currentLevel];        //DEBUGGING THINGS        try {            levelAnzeige.setText("Game: " + currentLevel + "\n"//                    + "\n" + "Steps:" + mover.getSteps()                    + "\n" + "X- Offset:" + gamePanel.getCamera().getXOffset() + "\n" + "Y- Offset:" + gamePanel.getCamera().getYOffset()                    + "\n" + "Camera Size:" + gamePanel.getCamera().getxSize() + "\n" + gamePanel.getCamera().getySize()                    + "\n" + "KeyInput:" + GUI.keyInputToMove(keyListener).getLocation());        } catch (Exception e) {        }    }    public void clear() {        //remove all Level Components        active = false;    }    public boolean isActive() {        return active;    }    public void mouseClicked(MouseEvent e) {//        for (int i = 0; i < maps.length; i++) {//            if (!mover.isSpeaking() && maps[i].isActiveInPosition(new Point(e.getX() - gamePanel.getCamera().getXOffset() + maps[i].chapterXOffset, e.getY() + gamePanel.getCamera().getYOffset() + +maps[i].chapterYOffset))) {//                start = maps[i].mapTiles[(int) (mover.getLocation().getX() / Tile.TILEWIDTH)][(int) mover.getLocation().getY() / Tile.TILEHEIGHT];//                target = maps[i].mapTiles[(e.getX() + gamePanel.getCamera().getXOffset()) / Tile.TILEWIDTH][(e.getY() + gamePanel.getCamera().getYOffset()) / Tile.TILEHEIGHT];//                pathFinder.searchPath(start, target);//            }//        }        click++;    }    public int whichLevel() {        return currentLevel;    }    public void setCurrentLevel(int currentLevel) {        dialog = 1;        this.currentLevel = currentLevel;    }    public void actionPerformed(ActionEvent e) {        JButton temp = (JButton) e.getSource();        try {            switch (Integer.parseInt(temp.getText())) {                case 1:                    createlevel1();                    break;                case 2:                    createlevel2();                    break;                case 3:                    createlevel3();                    break;                case 4:                    createlevel4();                    break;                case 5:                    createlevel5();                    break;            }        } catch (NumberFormatException ex) {            switch (temp.getText()) {                case "Lobby":                    createLobby();                    break;            }            System.out.println("Button without Number was pressed in Game(Listener)");        }    }    public void setGridLines() {        for (int i = 0; i < level.length; i++) {            if (level[i].isGridlines()) {                level[i].setGridLines(false);            } else {                level[i].setGridLines(true);            }        }    }    public boolean isGridLines() {        return gridLines;    }}