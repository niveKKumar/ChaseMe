import com.sun.istack.internal.Nullable;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import java.util.LinkedList;

public class EditorTileMenu extends JDialog {
    //Frame Components:
    private JPanel contentPane;
    private JPanel west;
    private JPanel south;
    private JLabel selectedLabel;
    private JButton btOk;
    private JPanel north;
    private JPanel center;

    private JTabbedPane tsTabPane;
    private JMenuBar menubar = new JMenuBar();   //Menüleiste erzeugen

    private int selectedID;
    private int selectedTileSet;

    private ArrayList<EditorTileTab> tileTabs = new ArrayList<>();
    private Editor belongingEditor;
    private Frame owner;

    private boolean firstStart = true;

    public EditorTileMenu(Frame owner, boolean modal, Editor pBelongingEditor) {
        super(owner, modal);
        this.owner = owner;
        belongingEditor = pBelongingEditor;
        selectedID = 22; // Wiese
        $$$setupUI$$$();
        setContentPane(contentPane);
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (d.width - getSize().width) / 2;
        int y = (d.height - getSize().height) / 2;
        setLocation(x, y);
        btOk.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onOK();
            }
        });
        createTileSet();
        setVisible(false);
        setSize(500, 300);
    }

    private void onOK() {
        belongingEditor.maps.get(belongingEditor.selectedMap).setGraphicID(selectedID);
        belongingEditor.addRecently(selectedID, tileTabs.get(selectedTileSet).getTabTileSet());
        setVisible(false);
    }

    public void createTileSet() {
        //Standard TileSet:
        if (firstStart) {
            TileSet ts = new TileSet("Content/Graphics/tileSets/12x12x3 - tileSet.png", 12, 12, 3);
            addCustomTileSet(ts);
            firstStart = false;
        } else {
            addTileSetThroughFileRequest();
        }
    }


    public void selectedinLabel(JLabel anzeige, @Nullable Icon icon) {
        try {
            anzeige.setIcon(icon);
        } catch (Exception e) {
            for (int i = 0; i < tileTabs.size(); i++) {
                anzeige.setIcon(new ImageIcon(tileTabs.get(selectedTileSet).getTabTileSet().tileSet[selectedID].tileImage));
            }
        }
    }

    public int findAndSetTileSetID(TileSet ts) {
        for (int i = 0; i < tileTabs.size(); i++) {
            if (ts.getTileSetImagePath().equals(tileTabs.get(i).getTabTileSet().getTileSetImagePath())) {
                return i;
            }
        }
        return 9999;
    }

    public int getSelectedID() {
        return selectedID;
    }

    public int getSelectedTileSetIndex() {
        return selectedTileSet;
    }

    public void setTileTabs(EditorTileTab pTileSet) {
        tileTabs.add(pTileSet);
        selectedTileSet = tileTabs.size() - 1;
    }

    public TileSet getTileSet(int index) {
        return tileTabs.get(index).getTabTileSet();
    }

    public void setSelectedID(int selectedID) {
        this.selectedID = selectedID;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        contentPane.setLayout(new BorderLayout(0, 0));
        west = new JPanel();
        west.setLayout(new BorderLayout(0, 0));
        west.setMinimumSize(new Dimension(50, 50));
        contentPane.add(west, BorderLayout.WEST);
        south = new JPanel();
        south.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        contentPane.add(south, BorderLayout.SOUTH);
        btOk = new JButton();
        btOk.setHorizontalTextPosition(2);
        btOk.setMaximumSize(new Dimension(300, 50));
        btOk.setMinimumSize(new Dimension(100, 50));
        btOk.setPreferredSize(new Dimension(100, 50));
        btOk.setText("Bestaetigen");
        south.add(btOk);
        selectedLabel = new JLabel();
        selectedLabel.setHorizontalAlignment(0);
        selectedLabel.setHorizontalTextPosition(2);
        selectedLabel.setMaximumSize(new Dimension(100, 100));
        selectedLabel.setPreferredSize(new Dimension(50, 50));
        selectedLabel.setText("");
        selectedLabel.setVerifyInputWhenFocusTarget(false);
        south.add(selectedLabel);
        north = new JPanel();
        north.setLayout(new BorderLayout(0, 0));
        contentPane.add(north, BorderLayout.NORTH);
        center = new JPanel();
        center.setLayout(new BorderLayout(0, 0));
        contentPane.add(center, BorderLayout.CENTER);
        tsTabPane = new JTabbedPane();
        center.add(tsTabPane, BorderLayout.CENTER);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    private void createUIComponents() {
        contentPane = new JPanel();
        menubar = new JMenuBar();   //Menüleiste erzeugen
        setJMenuBar(menubar);  //Menüleiste dem Fenster hinzufügen

        JMenuItem open = new JMenuItem("Öffnen");
        open.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                belongingEditor.loadCustomMap();
            }
        });

        JMenuItem save = new JMenuItem("Speichern");
        save.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                belongingEditor.saveCurrentMap(Meldungen.getFileAt("Save"));
            }
        });


        JMenu newMap = new JMenu("Neue Map anlegen");
        JMenuItem newMapWithSelection = new JMenuItem("Neue Map mit dem ausgewählten Tile erstellen");
        newMapWithSelection.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                Meldungen meldung = new Meldungen(owner, true, "Map");
                belongingEditor.createEditorMap(Integer.parseInt(meldung.getUserInput(0)), Integer.parseInt(meldung.getUserInput(0)), tileTabs.get(selectedTileSet).getTabTileSet(), selectedID);
            }
        });
        JMenuItem newBlankMap = new JMenuItem("Neue leere Map");
        newBlankMap.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                TileSet tempTS = new TileSet("Content/Graphics/tileSets/12x12x3 - tileSet.png", 12, 12, 3);
                Meldungen meldung = new Meldungen(owner, true, "Map");
                belongingEditor.createBlankEditorMap(Integer.parseInt(meldung.getUserInput(0)), Integer.parseInt(meldung.getUserInput(0)), tempTS);
            }
        });
        JMenuItem newItemMap = new JMenuItem("Neue Item Map");
        newItemMap.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                TileSet tempTS = new TileSet("Content/Graphics/tileSets/16x16x0 - tileSetItems.png", 16, 16, 0);
                Meldungen meldung = new Meldungen(owner, true, "Map");
                belongingEditor.createEditorMap(Integer.parseInt(meldung.getUserInput(0)), Integer.parseInt(meldung.getUserInput(0)), tempTS, 0);
            }
        });

        JMenuItem load = new JMenuItem("Neues Tile Set laden");
        load.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                createTileSet();
            }
        });
        menubar.add(newMap);
        newMap.add(newMapWithSelection);
        newMap.add(newBlankMap);
        newMap.add(newItemMap);
        menubar.add(open);
        menubar.add(save);
        menubar.add(load);
    }

    public boolean checkTileSet(TileSet ts) {
        for (int i = 0; i < tileTabs.size(); i++) {
            if (tileTabs.get(i).getTabTileSet().getTileSetImagePath().contentEquals(ts.getTileSetImagePath())) {
                return true;
            }
        }
        return false;
    }

    public void addTileSetThroughFileRequest() {
        File[] f = Meldungen.getFilesAt("TileSet");
        for (int i = 0; i < f.length; i++) {
            addCustomTileSet(new TileSet(f[i].getPath()));
        }
    }

    public void addCustomTileSet(TileSet ts) {
        tileTabs.add(new EditorTileTab(tsTabPane, ts, Integer.toString(tileTabs.size()), false));
        selectedTileSet = tileTabs.size() - 1;
    }


    class EditorTileTab implements MouseListener {
        int columns = 5;
        int gap = 2;
        String name = "k.A.";
        private JPanel tilePanel;
        private TileSet tabTileSet;
        private boolean filter;
        private EditorTileButton[] tiles;
        private LinkedList<Integer> filterIDs;

        public EditorTileTab(JTabbedPane location, TileSet ts, String pName, boolean filter) {
            tabTileSet = ts;
            name = pName;
            filterIDs = new LinkedList<>();
            createTabComponents(location, filter);
        }

        public void filterImages() {
            for (int i = 0; i < tiles.length; i++) {
                if (!isImageEmpty(tiles[i].getImg())) {
                    filterIDs.add(i);
                }
            }
        }

        public void showFilter() {
            if (filter) {
                createTileButtons(tilePanel, false);
            } else {
                createTileButtons(tilePanel, true);
            }
        }

        public void showFilter(JPanel display, boolean b) {
            if (filterIDs.isEmpty()) {
                filterImages();
            }

            if (b) {
                //Nur Tiles mit FilterID:
                for (int j = 0; j < filterIDs.size(); j++) {
                    display.add(tiles[filterIDs.get(j)]);
                }

            } else {
                //Alle Tiles:
                for (int i = 0; i < tiles.length; i++) {
                    display.add(tiles[i]);
                }
            }
            filter = b;

            display.revalidate();
        }

        public TileSet getTabTileSet() {
            return tabTileSet;
        }

        public void zoom(boolean zoomInIsTrueZoomOutisFalse, double zoomfactor) {
            if (zoomInIsTrueZoomOutisFalse) {
                //Reinzoom:
                zoomfactor = 1 - zoomfactor;
            } else {
                //Rauszoom:
                zoomfactor = 1 + zoomfactor;
            }
            EditorTileButton.setTileButtonSize((int) Math.round(EditorTileButton.SIZE * zoomfactor));
            tilePanel.removeAll();
            recalculateGrid(tilePanel.getParent().getWidth());
            createTileButtons(tilePanel, filter);
        }

        private boolean isImageEmpty(BufferedImage imgA) {
            float maxTransparentAmount = 99;
            int detectionQuality = 1; /*Peformance = höher ; Genauigkeit = niedriger (1)*/

            int pixelTransparent = 0;
            int width = imgA.getWidth();
            int height = imgA.getHeight();

            for (int y = 0; y < height; y += detectionQuality) {
                for (int x = 0; x < width; x += detectionQuality) {
                    // Compare the pixels for equality.
                    int pixel = imgA.getRGB(x, y);
                    if ((pixel >> 24) == 0x00) {
                        pixelTransparent++;
                    }
                }
            }

            float percent = (pixelTransparent * detectionQuality) * 100f / (width * height);
            return percent >= maxTransparentAmount;

        }

        public void createTabComponents(JTabbedPane tabbedPane, boolean filter) {
            tilePanel = new JPanel();
            createTileButtons(tilePanel, filter);
            JScrollPane scrollPane = new JScrollPane();
            scrollPane.add(tilePanel);
            scrollPane.setMaximumSize(scrollPane.getSize());
            scrollPane.addComponentListener(new ComponentListener() {
                @Override
                public void componentResized(ComponentEvent e) {
                    tilePanel.setMaximumSize(scrollPane.getSize());
                    recalculateGrid(scrollPane.getWidth());
                }

                @Override
                public void componentMoved(ComponentEvent e) {
                }

                @Override
                public void componentShown(ComponentEvent e) {
                }

                @Override
                public void componentHidden(ComponentEvent e) {
                }
            });
            scrollPane.getVerticalScrollBar().setUnitIncrement(8);
            scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
            scrollPane.setOpaque(true);
            scrollPane.setViewportView(tilePanel);
            tabbedPane.addTab("Tile Set " + name, scrollPane);
        }

        public JButton[] createStandardButtons(JPanel display) {
            //Erstellen der Standard Buttons: Zoom BTs - TextEingabe BT- empty Button
            String[] nam = {"+", "-", "<html>Filter: <br>" + filter + "</html>"};
            JButton[] buttons = new JButton[nam.length];
            for (int i = 0; i < nam.length; i++) {
                buttons[i] = new JButton(nam[i]);
                buttons[i].setMargin(new Insets(0, 0, 0, 0));
                buttons[i].setBorder(null);
                buttons[i].setPreferredSize(new Dimension(EditorTileButton.SIZE, EditorTileButton.SIZE));
                setFontAsBigAsSize(buttons[i]);
            }
            buttons[0].addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    zoom(false, 0.25);
                }
            });
            buttons[1].addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    zoom(true, 0.25);
                }
            });
            buttons[2].addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    showFilter();
                    buttons[2].setText("<html>Filter:<br>" + filter + "</html>");
                }
            });
            buttons[2].setFont(new Font(buttons[2].getFont().getName(), Font.PLAIN, 11));
            return buttons;
        }

        public void setFontAsBigAsSize(JButton bt) {
            boolean tooBig = false;
            int size = 1;
            String name = bt.getText();
            if (name.contentEquals("<html>")) {
                name = name.replaceAll("<html>", "");
            }
            Font f = new Font(bt.getFont().getName(), Font.PLAIN, size);
            bt.setFont(f);
            while (!tooBig) {
                FontMetrics metric = bt.getFontMetrics(bt.getFont());
                if (metric.getHeight() < EditorTileButton.SIZE && metric.stringWidth(name) < EditorTileButton.SIZE) {
                    size++;
                    f = new Font(bt.getName(), Font.PLAIN, size);
                } else {
                    size--;
                    f = new Font(bt.getName(), Font.PLAIN, size);
                    tooBig = true;
                }
                bt.setFont(f);
            }
        }

        public void createTileButtons(JPanel display, boolean pFilter) {
            int size = EditorTileButton.SIZE;
            JButton[] standard = createStandardButtons(display);

            //Erstellen der TileButtons:
            tiles = new EditorTileButton[tabTileSet.tileSet.length];
            for (int i = 0; i < tabTileSet.tileSet.length; i++) {
                tiles[i] = new EditorTileButton(i, tabTileSet);
                tiles[i].setSize(size, size);
                tiles[i].addMouseListener(this);
            }

            //Hinzufügen der Buttons:
            JTextField txtEingabe = new JTextField();
            txtEingabe.setBorder(null);
            txtEingabe.getDocument().addDocumentListener(new DocumentListener() {
                @Override
                public void insertUpdate(DocumentEvent e) {
                }

                @Override
                public void removeUpdate(DocumentEvent e) {
                }

                @Override
                public void changedUpdate(DocumentEvent e) {
                    try {
                        int idInTextArea = Integer.parseInt(txtEingabe.getText());
                        if (idInTextArea <= tabTileSet.tileSet.length) {
                            selectedID = Integer.parseInt(txtEingabe.getText());
                            selectedinLabel(selectedLabel, new ImageIcon(tabTileSet.tileSet[idInTextArea].tileImage));
                        } else {
                            txtEingabe.setText("");
                            JOptionPane.showMessageDialog(owner, "Es können nur Tiles von  0 bis " + tabTileSet.tileSet.length + " verwendet werden", "", JOptionPane.WARNING_MESSAGE);
                        }
                    } catch (NumberFormatException en) {
                        if (!txtEingabe.getText().equals("")) {
                            txtEingabe.setText("");
                            JOptionPane.showMessageDialog(owner, "Ungültige Zahl.", "", JOptionPane.WARNING_MESSAGE);
                        }
                    }
                }
            });
            //Standard:
            for (int i = 0; i < standard.length; i++) {
                display.add(standard[i]);
            }
            display.add(txtEingabe);
            EditorTileButton emptyButton = new EditorTileButton(9999, new BufferedImage(size, size, BufferedImage.TYPE_INT_ARGB_PRE));
            emptyButton.addMouseListener(this);
            display.add(emptyButton);
            //Tiles:
            showFilter(display, pFilter);

        }

        public void recalculateGrid(int parentWidth) {
            columns = parentWidth / (EditorTileButton.SIZE + gap);
            try {
                tilePanel.setLayout(new GridLayout(0, columns, gap, gap));
            } catch (Exception e) {
                tilePanel.setLayout(new GridLayout(0, 5, gap, gap));
            }
            tilePanel.revalidate();
            tilePanel.repaint();
        }

        @Override
        public void mouseClicked(MouseEvent e) {
            EditorTileButton source = ((EditorTileButton) e.getSource());
            selectedID = source.getId();
            //Schnellauswahl
            if (e.getClickCount() == 2) {
                belongingEditor.maps.get(belongingEditor.selectedMap).setGraphicID(selectedID);
                belongingEditor.addRecently(selectedID, tileTabs.get(selectedTileSet).getTabTileSet());
            }
            if (e.getClickCount() == 3) {
                JOptionPane.showMessageDialog(null, "Das gewählte Tile hat die ID " + source.getId(), "Tile ID", JOptionPane.INFORMATION_MESSAGE);
            }
            selectedinLabel(selectedLabel, source.getIcon());
        }

        @Override
        public void mousePressed(MouseEvent e) {
            EditorTileButton source = ((EditorTileButton) e.getSource());
            selectedID = source.getId();
            for (int i = 0; i < tileTabs.size(); i++) {
                if (source.getTileSetPath() == null) {
                    selectedID = 9999;
                    belongingEditor.maps.get(belongingEditor.selectedMap).setGraphicID(selectedID);
                    belongingEditor.addRecently(selectedID, tileTabs.get(selectedTileSet).getTabTileSet());
                } else {
                    selectedID = findAndSetTileSetID(new TileSet(source.getTileSetPath()));
                }
            }
        }


        @Override
        public void mouseReleased(MouseEvent e) {
        }

        @Override
        public void mouseEntered(MouseEvent e) {
        }

        @Override
        public void mouseExited(MouseEvent e) {
        }

    }
}
