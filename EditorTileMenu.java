import com.sun.istack.internal.Nullable;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import java.util.LinkedList;

public class EditorTileMenu extends JDialog {
    //Frame Components:
    private JPanel contentPane;
    private JPanel west;
    private JPanel south;
    private JLabel selectedLabel;
    private JButton btOk;
    private JPanel north;
    private JPanel center;

    private JTabbedPane tsTabPane;
    private JMenuBar menubar = new JMenuBar();   //Menüleiste erzeugen

    private int selectedID;
    private int selectedTileSet;

    private ArrayList tileSet = new ArrayList<TileSet>();
    private Editor belongingEditor;
    private Frame owner;

    private boolean firstStart = true;

    public EditorTileMenu(Frame owner, boolean modal, Editor pBelongingEditor) {
        super(owner, modal);
        this.owner = owner;
        belongingEditor = pBelongingEditor;
        selectedID = 22; // Wiese
        $$$setupUI$$$();
        setContentPane(contentPane);
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (d.width - getSize().width) / 2;
        int y = (d.height - getSize().height) / 2;
        setLocation(x, y);
        btOk.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onOK();
            }
        });
        createTileSet();
        setVisible(false);
        setSize(500, 300);
    }

    private void onOK() {
        ((EditorMap) belongingEditor.maps.get(belongingEditor.selectedMap)).setGraphicID(selectedID);
        belongingEditor.addRecently(selectedID, ((TileSet) tileSet.get(selectedTileSet)));
        setVisible(false);
    }

    public void createTileSet() {
        //Standard TileSet:
        if (firstStart) {
            //System.out.println("Editor : Create inside TileMenu Standard TS");
            tileSet.add(new TileSet("Content/Graphics/tileSets/12x12x3 - tileSet.png", 12, 12, 3)); // Standard Tile Set)
            selectedTileSet = tileSet.size() - 1;
            //System.out.println("Editor : Create inside TileMenu new TileTab");
            new EditorTileTab(tsTabPane, ((TileSet) tileSet.get(selectedTileSet)), Integer.toString(tileSet.size()), false);
            //System.out.println("Editor : Create inside TileMenu Finished");
            firstStart = false;
        } else {
            Meldungen meldung = new Meldungen(owner, true, "null");
            File[] f = Meldungen.getFilesAt("TileSet");
            for (int i = 0; i < f.length; i++) {
                //System.out.println("Create TileSet from File : " + i);
                tileSet.add(new TileSet(f[i].getPath()));
                selectedTileSet = tileSet.size() - 1;
                new EditorTileTab(tsTabPane, ((TileSet) tileSet.get(selectedTileSet)), Integer.toString(tileSet.size()), true);
            }
            //System.out.println("Finished");
        }
    }


    public void selectedinLabel(JLabel anzeige, @Nullable Icon icon) {
        try {
            anzeige.setIcon(icon);
        } catch (Exception e) {
            for (int i = 0; i < tileSet.size(); i++) {
                anzeige.setIcon(new ImageIcon(((TileSet) tileSet.get(selectedTileSet)).tileSet[selectedID].tileImage));
            }
        }
    }

    public int findAndSetTileSetID(TileSet ts) {
        for (int i = 0; i < tileSet.size(); i++) {
            if (ts.getTileSetImagePath().equals(((TileSet) tileSet.get(i)).getTileSetImagePath())) {
                return i;
            }
        }
        return 99;
    }

    public int getSelectedID() {
        return selectedID;
    }

    public int getSelectedTileSetIndex() {
        return selectedTileSet;
    }

    public void setTileSet(TileSet pTileSet) {
        tileSet.add(pTileSet);
        selectedTileSet = tileSet.size() - 1;
    }

    public TileSet getTileSet(int index) {
        return ((TileSet) tileSet.get(index));
    }

    public void setSelectedID(int selectedID) {
        this.selectedID = selectedID;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        contentPane.setLayout(new BorderLayout(0, 0));
        west = new JPanel();
        west.setLayout(new BorderLayout(0, 0));
        west.setMinimumSize(new Dimension(50, 50));
        contentPane.add(west, BorderLayout.WEST);
        south = new JPanel();
        south.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        contentPane.add(south, BorderLayout.SOUTH);
        btOk = new JButton();
        btOk.setHorizontalTextPosition(2);
        btOk.setMaximumSize(new Dimension(300, 50));
        btOk.setMinimumSize(new Dimension(100, 50));
        btOk.setPreferredSize(new Dimension(100, 50));
        btOk.setText("Bestaetigen");
        south.add(btOk);
        selectedLabel = new JLabel();
        selectedLabel.setHorizontalAlignment(0);
        selectedLabel.setHorizontalTextPosition(2);
        selectedLabel.setMaximumSize(new Dimension(100, 100));
        selectedLabel.setPreferredSize(new Dimension(50, 50));
        selectedLabel.setText("");
        selectedLabel.setVerifyInputWhenFocusTarget(false);
        south.add(selectedLabel);
        north = new JPanel();
        north.setLayout(new BorderLayout(0, 0));
        contentPane.add(north, BorderLayout.NORTH);
        center = new JPanel();
        center.setLayout(new BorderLayout(0, 0));
        contentPane.add(center, BorderLayout.CENTER);
        tsTabPane = new JTabbedPane();
        center.add(tsTabPane, BorderLayout.CENTER);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    private void createUIComponents() {
        contentPane = new JPanel();
        menubar = new JMenuBar();   //Menüleiste erzeugen
        setJMenuBar(menubar);  //Menüleiste dem Fenster hinzufügen

        JMenuItem open = new JMenuItem("Öffnen");
        open.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                belongingEditor.loadMap();
            }
        });

        JMenuItem save = new JMenuItem("Speichern");
        save.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                belongingEditor.saveMap(Meldungen.getFileAt("Save"), true);
            }
        });


        JMenu newMap = new JMenu("Neue Map anlegen");
        JMenuItem newMapWithSelection = new JMenuItem("Neue Map mit dem ausgewählten Tile erstellen");
        newMapWithSelection.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                Meldungen meldung = new Meldungen(owner, true, "Map");
                belongingEditor.createEditorMap(Integer.parseInt(meldung.getUserInput(0)), Integer.parseInt(meldung.getUserInput(1)), ((TileSet) tileSet.get(selectedTileSet)), selectedID);
            }
        });
        JMenuItem newBlankMap = new JMenuItem("Neue leere Map");
        newBlankMap.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                TileSet tempTS = new TileSet("Content/Graphics/tileSets/12x12x3 - tileSet.png", 12, 12, 3);
                Meldungen meldung = new Meldungen(owner, true, "Map");
                belongingEditor.createBlankEditorMap(Integer.parseInt(meldung.getUserInput(0)), Integer.parseInt(meldung.getUserInput(1)), tempTS);
            }
        });
        JMenuItem newItemMap = new JMenuItem("Neue Item Map");
        newItemMap.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                TileSet tempTS = new TileSet("Content/Graphics/tileSets/16x16x0 - tileSetItems.png", 16, 16, 0);
                Meldungen meldung = new Meldungen(owner, true, "Map");
                belongingEditor.createEditorMap(Integer.parseInt(meldung.getUserInput(0)), Integer.parseInt(meldung.getUserInput(1)), tempTS, 0);
            }
        });

        JMenuItem load = new JMenuItem("Neues Tile Set laden");
        load.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                createTileSet();
            }
        });
        menubar.add(newMap);
        newMap.add(newMapWithSelection);
        newMap.add(newBlankMap);
        newMap.add(newItemMap);
        menubar.add(open);
        menubar.add(save);
        menubar.add(load);
    }


    class EditorTileTab implements MouseListener {

        int columns = 5;
        String name = "k.A.";
        private JPanel tilePanel;
        private TileSet tabTileSet;
        private boolean filter;
        private EditorTileButton[] tiles;
        private LinkedList<Integer> filterIDs;

        public EditorTileTab(JTabbedPane location, TileSet ts, String pName, boolean filter) {
            tabTileSet = ts;
            name = pName;
            filterIDs = new LinkedList<>();
            createTileSetComponents(location, filter);

        }

        public void filterImages() {
            //System.out.println("Filter Images");
            for (int i = 0; i < tiles.length; i++) {
                //System.out.println("Check if Img is Empty " + i);
                if (!isImageEmpty(tiles[i].getImg())) {
                    filterIDs.add(i);
                    //System.out.println("Filtered IDs: " + i);
                }
            }
        }

        public void showFilter(JPanel display, boolean b) {
            //System.out.println("Show Filter : " + b);
            if (b != filter) {
                display.removeAll();
                //Adding custom Buttons:
                JButton filterButton = new JButton("<html>Filter: <br>" + filter + "</html>");
                filterButton.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        if (!filter) {
                            showFilter(tilePanel, true);
                        } else {
                            showFilter(tilePanel, false);
                        }
                    }
                });
                filterButton.setBorder(null);
                filterButton.setSize(50, 50);
                display.add(filterButton);
                JTextField txtEingabe = new JTextField();
                txtEingabe.setBorder(null);
                txtEingabe.setSize(EditorTileButton.size, EditorTileButton.size);
                txtEingabe.getDocument().addDocumentListener(new DocumentListener() {
                    @Override
                    public void insertUpdate(DocumentEvent e) {
                    }

                    @Override
                    public void removeUpdate(DocumentEvent e) {
                    }

                    @Override
                    public void changedUpdate(DocumentEvent e) {
                        try {
                            int idInTextArea = Integer.parseInt(txtEingabe.getText());
                            if (idInTextArea <= tabTileSet.tileSet.length) {
                                selectedID = Integer.parseInt(txtEingabe.getText());
                                selectedinLabel(selectedLabel, new ImageIcon(tabTileSet.tileSet[idInTextArea].tileImage));
                            } else {
                                txtEingabe.setText("");
                                JOptionPane.showMessageDialog(owner, "Es können nur Tiles von  0 bis " + tabTileSet.tileSet.length + " verwendet werden", "", JOptionPane.WARNING_MESSAGE);
                            }
                        } catch (NumberFormatException en) {
                            if (!txtEingabe.getText().equals("")) {
                                txtEingabe.setText("");
                                JOptionPane.showMessageDialog(owner, "Ungültige Zahl.", "", JOptionPane.WARNING_MESSAGE);
                            }
                        }
                    }
                });
                tilePanel.add(txtEingabe);
                EditorTileButton emptyButton = new EditorTileButton(9999, new BufferedImage(EditorTileButton.size, EditorTileButton.size, BufferedImage.TYPE_INT_ARGB_PRE));
                emptyButton.setBorder(null);
                emptyButton.addMouseListener(this);
                display.add(emptyButton);
                //Adding ButtonTiles (with or without Filter):
                if (b) {
                    if (filterIDs.isEmpty()) {
                        filterImages();
                    }
                    for (int j = 0; j < filterIDs.size(); j++) {
                        display.add(tiles[filterIDs.get(j)]);
                    }
                } else {
                    for (int i = 0; i < tiles.length; i++) {
                        display.add(tiles[i]);
                    }
                }
                filter = b;
                filterButton.setText("<html>Filter: <br>" + filter + "</html>");
            }
            display.revalidate();
        }

        private boolean isImageEmpty(BufferedImage imgA) {
            float maxTransparentAmount = 99;
            int detectionQuality = 1; /*Peformance = höher ; Genauigkeit = niedriger (1)*/

            int pixelTransparent = 0;
            int width = imgA.getWidth();
            int height = imgA.getHeight();

            for (int y = 0; y < height; y += detectionQuality) {
                for (int x = 0; x < width; x += detectionQuality) {
                    // Compare the pixels for equality.
                    int pixel = imgA.getRGB(x, y);
                    if ((pixel >> 24) == 0x00) {
                        pixelTransparent++;
                    }
                }
            }

            float percent = (pixelTransparent * detectionQuality) * 100f / (width * height);
            return percent >= maxTransparentAmount;

        }

        public void createTileSetComponents(JTabbedPane tabbedPane, boolean filter) {
            int gap = 2;
            //System.out.println("Editor : Create inside TileMenuTab tilePanel");
            tilePanel = new JPanel();
            // Dynamisches tilePanel GridLayout
            tilePanel.setLayout(new GridLayout(0, columns, gap, gap));
            //Hinzufuegen der Tiles auf das JPanel

            //System.out.println("Editor : Start inside TileMenuTab TileButtons");

            createTileButtons(tabTileSet, tilePanel, filter);

            //System.out.println("Editor : Finished inside TileMenuTab TileButtons");

            // Erstellen des Scrollpanes und zuweisen des JPanels
            JScrollPane scrollPane = new JScrollPane();
            scrollPane.add(tilePanel);
            scrollPane.addComponentListener(new ComponentListener() {
                @Override
                public void componentResized(ComponentEvent e) {
//                   //System.out.println("Changed TilePanel Size");
                    columns = (int) Math.floor(tabbedPane.getWidth() / (EditorTileButton.size + gap));
                    tilePanel.setLayout(new GridLayout(0, columns, gap, gap));
                    tilePanel.revalidate();
                    tilePanel.repaint();
                }

                @Override
                public void componentMoved(ComponentEvent e) {
                }

                @Override
                public void componentShown(ComponentEvent e) {
                }

                @Override
                public void componentHidden(ComponentEvent e) {
                }
            });
            scrollPane.getVerticalScrollBar().setUnitIncrement(8);
            scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
            scrollPane.setOpaque(true);
            scrollPane.setViewportView(tilePanel);
            tabbedPane.addTab("Tile Set " + name, scrollPane);
            //System.out.println("Editor : Fnished inside TileMenuTab");
        }

        public void createTileButtons(TileSet current, JPanel display, boolean pFilter) {
            tiles = new EditorTileButton[current.tileSet.length];

            for (int i = 0; i < current.tileSet.length; i++) {
                tiles[i] = new EditorTileButton(i, current);
                tiles[i].addMouseListener(this);
            }
            if (filter) {
                filterImages();
                filter = false;
                showFilter(display, true);
            } else {
                filter = true;
                showFilter(display, false);
            }


        }


        @Override
        public void mouseClicked(MouseEvent e) {
            EditorTileButton source = ((EditorTileButton) e.getSource());
            selectedID = source.getId();
            //Schnellauswahl
            if (e.getClickCount() == 2) {
                ((EditorMap) belongingEditor.maps.get(belongingEditor.selectedMap)).setGraphicID(selectedID);
            }
            selectedinLabel(selectedLabel, source.getIcon());
        }

        @Override
        public void mousePressed(MouseEvent e) {
            EditorTileButton source = ((EditorTileButton) e.getSource());
            selectedID = source.getId();
            for (int i = 0; i < tileSet.size(); i++) {
                if (source.getTileSetPath() == null) {
                    selectedID = 9999;
                    ((EditorMap) belongingEditor.maps.get(belongingEditor.selectedMap)).setGraphicID(selectedID);
                } else {
                    selectedID = findAndSetTileSetID(new TileSet(source.getTileSetPath()));
                }
            }
        }


        @Override
        public void mouseReleased(MouseEvent e) {
        }

        @Override
        public void mouseEntered(MouseEvent e) {
        }

        @Override
        public void mouseExited(MouseEvent e) {
        }

    }
}
